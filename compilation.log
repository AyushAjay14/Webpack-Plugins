
> webpack_demo@1.0.0 dev
> webpack -- --env mode=development

<ref *2> Compilation {
  _backCompat: true,
  hooks: {
    buildModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    rebuildModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    failedModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    succeedModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    stillValidModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    addEntry: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    failedEntry: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    succeedEntry: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    dependencyReferencedExports: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    executeModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    prepareModuleExecution: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncParallelHook]
    },
    finishModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    finishRebuildingModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    unseal: Hook {
      _args: [],
      name: undefined,
      taps: [Array],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    seal: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeChunks: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeDependencies: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    afterOptimizeDependencies: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimize: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    afterOptimizeModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    afterOptimizeChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeTree: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    afterOptimizeTree: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeChunkModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesBailHook]
    },
    afterOptimizeChunkModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    shouldRecord: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    additionalChunkRuntimeRequirements: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    runtimeRequirementInChunk: HookMap {
      _map: Map(0) {},
      name: undefined,
      _factory: [Function (anonymous)],
      _interceptors: []
    },
    additionalModuleRuntimeRequirements: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    runtimeRequirementInModule: HookMap {
      _map: Map(0) {},
      name: undefined,
      _factory: [Function (anonymous)],
      _interceptors: []
    },
    additionalTreeRuntimeRequirements: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    runtimeRequirementInTree: HookMap {
      _map: [Map],
      name: undefined,
      _factory: [Function (anonymous)],
      _interceptors: []
    },
    runtimeModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    reviveModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeModuleIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    moduleIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeModuleIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterOptimizeModuleIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    reviveChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeChunkIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    chunkIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeChunkIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterOptimizeChunkIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    recordModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    recordChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeCodeGeneration: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeModuleHash: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterModuleHash: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeCodeGeneration: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterCodeGeneration: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeRuntimeRequirements: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterRuntimeRequirements: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeHash: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    contentHash: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterHash: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    recordHash: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    record: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeModuleAssets: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    shouldGenerateChunkAssets: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    beforeChunkAssets: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    additionalChunkAssets: {
      name: [Getter/Setter],
      intercept: [Function: deprecated],
      tap: [Function: deprecated],
      tapAsync: [Function: deprecated],
      tapPromise: [Function: deprecated],
      _fakeHook: true
    },
    additionalAssets: {
      name: 'additionalAssets',
      intercept: [Function: intercept],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      _fakeHook: true
    },
    optimizeChunkAssets: {
      name: [Getter/Setter],
      intercept: [Function: deprecated],
      tap: [Function: deprecated],
      tapAsync: [Function: deprecated],
      tapPromise: [Function: deprecated],
      _fakeHook: true
    },
    afterOptimizeChunkAssets: {
      name: [Getter/Setter],
      intercept: [Function: deprecated],
      tap: [Function: deprecated],
      tapAsync: [Function: deprecated],
      tapPromise: [Function: deprecated],
      _fakeHook: true
    },
    optimizeAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [Array],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    afterOptimizeAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    processAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [Array],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    afterProcessAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    processAdditionalAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    needAdditionalSeal: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    afterSeal: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    renderManifest: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    fullHash: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    chunkHash: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    moduleAsset: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    chunkAsset: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    assetPath: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    needAdditionalPass: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    childCompiler: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    log: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    processWarnings: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    processErrors: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    statsPreset: HookMap {
      _map: Map(0) {},
      name: undefined,
      _factory: [Function (anonymous)],
      _interceptors: []
    },
    statsNormalize: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    statsFactory: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    statsPrinter: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    normalModuleLoader: [Getter]
  },
  name: undefined,
  startTime: undefined,
  endTime: undefined,
  compiler: <ref *1> Compiler {
    hooks: {
      initialize: [Hook],
      shouldEmit: [Hook],
      done: [Hook],
      afterDone: [Hook],
      additionalPass: [Hook],
      beforeRun: [Hook],
      run: [Hook],
      emit: [Hook],
      assetEmitted: [Hook],
      afterEmit: [Hook],
      thisCompilation: [Hook],
      compilation: [Hook],
      normalModuleFactory: [Hook],
      contextModuleFactory: [Hook],
      beforeCompile: [Hook],
      compile: [Hook],
      make: [Hook],
      finishMake: [Hook],
      afterCompile: [Hook],
      readRecords: [Hook],
      emitRecords: [Hook],
      watchRun: [Hook],
      failed: [Hook],
      invalid: [Hook],
      watchClose: [Hook],
      shutdown: [Hook],
      infrastructureLog: [Hook],
      environment: [Hook],
      afterEnvironment: [Hook],
      afterPlugins: [Hook],
      afterResolvers: [Hook],
      entryOption: [Hook]
    },
    webpack: [Function: f] {
      webpack: [Getter],
      validate: [Getter],
      validateSchema: [Getter],
      version: [Getter],
      cli: [Getter],
      AutomaticPrefetchPlugin: [Getter],
      AsyncDependenciesBlock: [Getter],
      BannerPlugin: [Getter],
      Cache: [Getter],
      Chunk: [Getter],
      ChunkGraph: [Getter],
      CleanPlugin: [Getter],
      Compilation: [Getter],
      Compiler: [Getter],
      ConcatenationScope: [Getter],
      ContextExclusionPlugin: [Getter],
      ContextReplacementPlugin: [Getter],
      DefinePlugin: [Getter],
      DelegatedPlugin: [Getter],
      Dependency: [Getter],
      DllPlugin: [Getter],
      DllReferencePlugin: [Getter],
      DynamicEntryPlugin: [Getter],
      EntryOptionPlugin: [Getter],
      EntryPlugin: [Getter],
      EnvironmentPlugin: [Getter],
      EvalDevToolModulePlugin: [Getter],
      EvalSourceMapDevToolPlugin: [Getter],
      ExternalModule: [Getter],
      ExternalsPlugin: [Getter],
      Generator: [Getter],
      HotUpdateChunk: [Getter],
      HotModuleReplacementPlugin: [Getter],
      IgnorePlugin: [Getter],
      JavascriptModulesPlugin: [Getter],
      LibManifestPlugin: [Getter],
      LibraryTemplatePlugin: [Getter],
      LoaderOptionsPlugin: [Getter],
      LoaderTargetPlugin: [Getter],
      Module: [Getter],
      ModuleFilenameHelpers: [Getter],
      ModuleGraph: [Getter],
      ModuleGraphConnection: [Getter],
      NoEmitOnErrorsPlugin: [Getter],
      NormalModule: [Getter],
      NormalModuleReplacementPlugin: [Getter],
      MultiCompiler: [Getter],
      Parser: [Getter],
      PrefetchPlugin: [Getter],
      ProgressPlugin: [Getter],
      ProvidePlugin: [Getter],
      RuntimeGlobals: [Getter],
      RuntimeModule: [Getter],
      SingleEntryPlugin: [Getter],
      SourceMapDevToolPlugin: [Getter],
      Stats: [Getter],
      Template: [Getter],
      UsageState: [Getter],
      WatchIgnorePlugin: [Getter],
      WebpackError: [Getter],
      WebpackOptionsApply: [Getter],
      WebpackOptionsDefaulter: [Getter],
      WebpackOptionsValidationError: [Getter],
      ValidationError: [Getter],
      cache: [Object],
      config: [Object],
      dependencies: [Object],
      ids: [Object],
      javascript: [Object],
      optimize: [Object],
      runtime: [Object],
      prefetch: [Object],
      web: [Object],
      webworker: [Object],
      node: [Object],
      electron: [Object],
      wasm: [Object],
      library: [Object],
      container: [Object],
      sharing: [Object],
      debug: [Object],
      util: [Object],
      sources: [Getter],
      experiments: [Object]
    },
    name: undefined,
    parentCompilation: undefined,
    root: [Circular *1],
    outputPath: '/Users/ayushajay/Desktop/Webpack_demo/dist',
    watching: undefined,
    outputFileSystem: {
      appendFile: [Function: appendFile],
      appendFileSync: [Function: appendFileSync],
      access: [Function: access],
      accessSync: [Function: accessSync],
      chown: [Function (anonymous)],
      chownSync: [Function (anonymous)],
      chmod: [Function (anonymous)],
      chmodSync: [Function (anonymous)],
      close: [Function: close],
      closeSync: [Function: closeSync],
      copyFile: [Function: copyFile],
      copyFileSync: [Function: copyFileSync],
      cp: [Function: cp],
      cpSync: [Function: cpSync],
      createReadStream: [Function: createReadStream],
      createWriteStream: [Function: createWriteStream],
      exists: [Function: exists],
      existsSync: [Function: existsSync],
      fchown: [Function (anonymous)],
      fchownSync: [Function (anonymous)],
      fchmod: [Function (anonymous)],
      fchmodSync: [Function (anonymous)],
      fdatasync: [Function: fdatasync],
      fdatasyncSync: [Function: fdatasyncSync],
      fstat: [Function (anonymous)],
      fstatSync: [Function (anonymous)],
      fsync: [Function: fsync],
      fsyncSync: [Function: fsyncSync],
      ftruncate: [Function: ftruncate],
      ftruncateSync: [Function: ftruncateSync],
      futimes: [Function: futimes],
      futimesSync: [Function: futimesSync],
      lchown: [Function (anonymous)],
      lchownSync: [Function (anonymous)],
      lchmod: [Function (anonymous)],
      lchmodSync: [Function (anonymous)],
      link: [Function: link],
      linkSync: [Function: linkSync],
      lstat: [Function (anonymous)],
      lstatSync: [Function (anonymous)],
      lutimes: [Function: lutimes],
      lutimesSync: [Function: lutimesSync],
      mkdir: [Function: mkdir],
      mkdirSync: [Function: mkdirSync],
      mkdtemp: [Function: mkdtemp],
      mkdtempSync: [Function: mkdtempSync],
      open: [Function: open],
      openSync: [Function: openSync],
      opendir: [Function: opendir],
      opendirSync: [Function: opendirSync],
      readdir: [Function: readdir],
      readdirSync: [Function: readdirSync],
      read: [Function: read],
      readSync: [Function (anonymous)],
      readv: [Function: readv],
      readvSync: [Function: readvSync],
      readFile: [Function: readFile],
      readFileSync: [Function: readFileSync],
      readlink: [Function: readlink],
      readlinkSync: [Function: readlinkSync],
      realpath: [Function],
      realpathSync: [Function],
      rename: [Function: rename],
      renameSync: [Function: renameSync],
      rm: [Function: rm],
      rmSync: [Function: rmSync],
      rmdir: [Function: rmdir],
      rmdirSync: [Function: rmdirSync],
      stat: [Function (anonymous)],
      statfs: [Function: statfs],
      statSync: [Function (anonymous)],
      statfsSync: [Function: statfsSync],
      symlink: [Function: symlink],
      symlinkSync: [Function: symlinkSync],
      truncate: [Function: truncate],
      truncateSync: [Function: truncateSync],
      unwatchFile: [Function: unwatchFile],
      unlink: [Function: unlink],
      unlinkSync: [Function: unlinkSync],
      utimes: [Function: utimes],
      utimesSync: [Function: utimesSync],
      watch: [Function: watch],
      watchFile: [Function: watchFile],
      writeFile: [Function: writeFile],
      writeFileSync: [Function: writeFileSync],
      write: [Function: write],
      writeSync: [Function: writeSync],
      writev: [Function: writev],
      writevSync: [Function: writevSync],
      Dir: [class Dir],
      Dirent: [class Dirent],
      Stats: [Function: Stats],
      ReadStream: [Getter/Setter],
      WriteStream: [Getter/Setter],
      FileReadStream: [Getter/Setter],
      FileWriteStream: [Getter/Setter],
      _toUnixTimestamp: [Function: toUnixTimestamp],
      F_OK: 0,
      R_OK: 4,
      W_OK: 2,
      X_OK: 1,
      constants: [Object: null prototype],
      promises: [Getter],
      gracefulify: [Function: patch]
    },
    intermediateFileSystem: {
      appendFile: [Function: appendFile],
      appendFileSync: [Function: appendFileSync],
      access: [Function: access],
      accessSync: [Function: accessSync],
      chown: [Function (anonymous)],
      chownSync: [Function (anonymous)],
      chmod: [Function (anonymous)],
      chmodSync: [Function (anonymous)],
      close: [Function: close],
      closeSync: [Function: closeSync],
      copyFile: [Function: copyFile],
      copyFileSync: [Function: copyFileSync],
      cp: [Function: cp],
      cpSync: [Function: cpSync],
      createReadStream: [Function: createReadStream],
      createWriteStream: [Function: createWriteStream],
      exists: [Function: exists],
      existsSync: [Function: existsSync],
      fchown: [Function (anonymous)],
      fchownSync: [Function (anonymous)],
      fchmod: [Function (anonymous)],
      fchmodSync: [Function (anonymous)],
      fdatasync: [Function: fdatasync],
      fdatasyncSync: [Function: fdatasyncSync],
      fstat: [Function (anonymous)],
      fstatSync: [Function (anonymous)],
      fsync: [Function: fsync],
      fsyncSync: [Function: fsyncSync],
      ftruncate: [Function: ftruncate],
      ftruncateSync: [Function: ftruncateSync],
      futimes: [Function: futimes],
      futimesSync: [Function: futimesSync],
      lchown: [Function (anonymous)],
      lchownSync: [Function (anonymous)],
      lchmod: [Function (anonymous)],
      lchmodSync: [Function (anonymous)],
      link: [Function: link],
      linkSync: [Function: linkSync],
      lstat: [Function (anonymous)],
      lstatSync: [Function (anonymous)],
      lutimes: [Function: lutimes],
      lutimesSync: [Function: lutimesSync],
      mkdir: [Function: mkdir],
      mkdirSync: [Function: mkdirSync],
      mkdtemp: [Function: mkdtemp],
      mkdtempSync: [Function: mkdtempSync],
      open: [Function: open],
      openSync: [Function: openSync],
      opendir: [Function: opendir],
      opendirSync: [Function: opendirSync],
      readdir: [Function: readdir],
      readdirSync: [Function: readdirSync],
      read: [Function: read],
      readSync: [Function (anonymous)],
      readv: [Function: readv],
      readvSync: [Function: readvSync],
      readFile: [Function: readFile],
      readFileSync: [Function: readFileSync],
      readlink: [Function: readlink],
      readlinkSync: [Function: readlinkSync],
      realpath: [Function],
      realpathSync: [Function],
      rename: [Function: rename],
      renameSync: [Function: renameSync],
      rm: [Function: rm],
      rmSync: [Function: rmSync],
      rmdir: [Function: rmdir],
      rmdirSync: [Function: rmdirSync],
      stat: [Function (anonymous)],
      statfs: [Function: statfs],
      statSync: [Function (anonymous)],
      statfsSync: [Function: statfsSync],
      symlink: [Function: symlink],
      symlinkSync: [Function: symlinkSync],
      truncate: [Function: truncate],
      truncateSync: [Function: truncateSync],
      unwatchFile: [Function: unwatchFile],
      unlink: [Function: unlink],
      unlinkSync: [Function: unlinkSync],
      utimes: [Function: utimes],
      utimesSync: [Function: utimesSync],
      watch: [Function: watch],
      watchFile: [Function: watchFile],
      writeFile: [Function: writeFile],
      writeFileSync: [Function: writeFileSync],
      write: [Function: write],
      writeSync: [Function: writeSync],
      writev: [Function: writev],
      writevSync: [Function: writevSync],
      Dir: [class Dir],
      Dirent: [class Dirent],
      Stats: [Function: Stats],
      ReadStream: [Getter/Setter],
      WriteStream: [Getter/Setter],
      FileReadStream: [Getter/Setter],
      FileWriteStream: [Getter/Setter],
      _toUnixTimestamp: [Function: toUnixTimestamp],
      F_OK: 0,
      R_OK: 4,
      W_OK: 2,
      X_OK: 1,
      constants: [Object: null prototype],
      promises: [Getter],
      gracefulify: [Function: patch]
    },
    inputFileSystem: CachedInputFileSystem {
      fileSystem: [Object],
      _lstatBackend: [CacheBackend],
      lstat: [Function: bound provide],
      lstatSync: [Function: bound provideSync],
      _statBackend: [CacheBackend],
      stat: [Function: bound provide],
      statSync: [Function: bound provideSync],
      _readdirBackend: [CacheBackend],
      readdir: [Function: bound provide],
      readdirSync: [Function: bound provideSync],
      _readFileBackend: [CacheBackend],
      readFile: [Function: bound provide],
      readFileSync: [Function: bound provideSync],
      _readJsonBackend: [CacheBackend],
      readJson: [Function: bound provide],
      readJsonSync: [Function: bound provideSync],
      _readlinkBackend: [CacheBackend],
      readlink: [Function: bound provide],
      readlinkSync: [Function: bound provideSync]
    },
    watchFileSystem: NodeWatchFileSystem {
      inputFileSystem: [CachedInputFileSystem],
      watcherOptions: [Object],
      watcher: [Watchpack]
    },
    recordsInputPath: null,
    recordsOutputPath: null,
    records: {},
    managedPaths: Set(1) { '/Users/ayushajay/Desktop/Webpack_demo/node_modules/' },
    immutablePaths: Set(0) {},
    modifiedFiles: undefined,
    removedFiles: undefined,
    fileTimestamps: undefined,
    contextTimestamps: undefined,
    fsStartTime: 1685866856571,
    resolverFactory: ResolverFactory { hooks: [Object], cache: Map(0) {} },
    infrastructureLogger: [Function: logger],
    options: {
      amd: undefined,
      bail: undefined,
      cache: [Object],
      context: '/Users/ayushajay/Desktop/Webpack_demo',
      dependencies: undefined,
      devServer: [Object],
      devtool: 'eval',
      entry: [Object],
      experiments: [Object],
      externals: undefined,
      externalsPresets: [Object],
      externalsType: 'var',
      ignoreWarnings: undefined,
      infrastructureLogging: [Object],
      loader: [Object],
      mode: 'development',
      module: [Object],
      name: undefined,
      node: [Object],
      optimization: [Object],
      output: [Object],
      parallelism: 100,
      performance: false,
      plugins: [Array],
      profile: false,
      recordsInputPath: false,
      recordsOutputPath: false,
      resolve: [Object],
      resolveLoader: [Object],
      snapshot: [Object],
      stats: [Object],
      target: 'web',
      watch: false,
      watchOptions: {}
    },
    context: '/Users/ayushajay/Desktop/Webpack_demo',
    requestShortener: RequestShortener { contextify: [Function: boundFn] },
    cache: Cache { hooks: [Object] },
    moduleMemCaches: undefined,
    compilerPath: '',
    running: true,
    idle: false,
    watchMode: false,
    _backCompat: true,
    _lastCompilation: [Circular *2],
    _lastNormalModuleFactory: NormalModuleFactory {
      hooks: [Object],
      resolverFactory: [ResolverFactory],
      ruleSet: [Object],
      context: '/Users/ayushajay/Desktop/Webpack_demo',
      fs: [CachedInputFileSystem],
      _globalParserOptions: [Object],
      _globalGeneratorOptions: {},
      parserCache: Map(0) {},
      generatorCache: Map(0) {},
      _restoredUnsafeCacheEntries: Set(0) {},
      _parseResourceWithoutFragment: [Function (anonymous)]
    },
    _assetEmittingSourceCache: WeakMap { <items unknown> },
    _assetEmittingWrittenFiles: Map(0) {},
    _assetEmittingPreviousFiles: Set(0) {}
  },
  resolverFactory: ResolverFactory {
    hooks: { resolveOptions: [HookMap], resolver: [HookMap] },
    cache: Map(0) {}
  },
  inputFileSystem: CachedInputFileSystem {
    fileSystem: {
      appendFile: [Function: appendFile],
      appendFileSync: [Function: appendFileSync],
      access: [Function: access],
      accessSync: [Function: accessSync],
      chown: [Function (anonymous)],
      chownSync: [Function (anonymous)],
      chmod: [Function (anonymous)],
      chmodSync: [Function (anonymous)],
      close: [Function: close],
      closeSync: [Function: closeSync],
      copyFile: [Function: copyFile],
      copyFileSync: [Function: copyFileSync],
      cp: [Function: cp],
      cpSync: [Function: cpSync],
      createReadStream: [Function: createReadStream],
      createWriteStream: [Function: createWriteStream],
      exists: [Function: exists],
      existsSync: [Function: existsSync],
      fchown: [Function (anonymous)],
      fchownSync: [Function (anonymous)],
      fchmod: [Function (anonymous)],
      fchmodSync: [Function (anonymous)],
      fdatasync: [Function: fdatasync],
      fdatasyncSync: [Function: fdatasyncSync],
      fstat: [Function (anonymous)],
      fstatSync: [Function (anonymous)],
      fsync: [Function: fsync],
      fsyncSync: [Function: fsyncSync],
      ftruncate: [Function: ftruncate],
      ftruncateSync: [Function: ftruncateSync],
      futimes: [Function: futimes],
      futimesSync: [Function: futimesSync],
      lchown: [Function (anonymous)],
      lchownSync: [Function (anonymous)],
      lchmod: [Function (anonymous)],
      lchmodSync: [Function (anonymous)],
      link: [Function: link],
      linkSync: [Function: linkSync],
      lstat: [Function (anonymous)],
      lstatSync: [Function (anonymous)],
      lutimes: [Function: lutimes],
      lutimesSync: [Function: lutimesSync],
      mkdir: [Function: mkdir],
      mkdirSync: [Function: mkdirSync],
      mkdtemp: [Function: mkdtemp],
      mkdtempSync: [Function: mkdtempSync],
      open: [Function: open],
      openSync: [Function: openSync],
      opendir: [Function: opendir],
      opendirSync: [Function: opendirSync],
      readdir: [Function: readdir],
      readdirSync: [Function: readdirSync],
      read: [Function: read],
      readSync: [Function (anonymous)],
      readv: [Function: readv],
      readvSync: [Function: readvSync],
      readFile: [Function: readFile],
      readFileSync: [Function: readFileSync],
      readlink: [Function: readlink],
      readlinkSync: [Function: readlinkSync],
      realpath: [Function],
      realpathSync: [Function],
      rename: [Function: rename],
      renameSync: [Function: renameSync],
      rm: [Function: rm],
      rmSync: [Function: rmSync],
      rmdir: [Function: rmdir],
      rmdirSync: [Function: rmdirSync],
      stat: [Function (anonymous)],
      statfs: [Function: statfs],
      statSync: [Function (anonymous)],
      statfsSync: [Function: statfsSync],
      symlink: [Function: symlink],
      symlinkSync: [Function: symlinkSync],
      truncate: [Function: truncate],
      truncateSync: [Function: truncateSync],
      unwatchFile: [Function: unwatchFile],
      unlink: [Function: unlink],
      unlinkSync: [Function: unlinkSync],
      utimes: [Function: utimes],
      utimesSync: [Function: utimesSync],
      watch: [Function: watch],
      watchFile: [Function: watchFile],
      writeFile: [Function: writeFile],
      writeFileSync: [Function: writeFileSync],
      write: [Function: write],
      writeSync: [Function: writeSync],
      writev: [Function: writev],
      writevSync: [Function: writevSync],
      Dir: [class Dir],
      Dirent: [class Dirent],
      Stats: [Function: Stats],
      ReadStream: [Getter/Setter],
      WriteStream: [Getter/Setter],
      FileReadStream: [Getter/Setter],
      FileWriteStream: [Getter/Setter],
      _toUnixTimestamp: [Function: toUnixTimestamp],
      F_OK: 0,
      R_OK: 4,
      W_OK: 2,
      X_OK: 1,
      constants: [Object: null prototype],
      promises: [Getter],
      gracefulify: [Function: patch]
    },
    _lstatBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function (anonymous)],
      _syncProvider: [Function (anonymous)],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    lstat: [Function: bound provide],
    lstatSync: [Function: bound provideSync],
    _statBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function (anonymous)],
      _syncProvider: [Function (anonymous)],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    stat: [Function: bound provide],
    statSync: [Function: bound provideSync],
    _readdirBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function: readdir],
      _syncProvider: [Function: readdirSync],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    readdir: [Function: bound provide],
    readdirSync: [Function: bound provideSync],
    _readFileBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function: readFile],
      _syncProvider: [Function: readFileSync],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    readFile: [Function: bound provide],
    readFileSync: [Function: bound provideSync],
    _readJsonBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function (anonymous)],
      _syncProvider: [Function (anonymous)],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    readJson: [Function: bound provide],
    readJsonSync: [Function: bound provideSync],
    _readlinkBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function: readlink],
      _syncProvider: [Function: readlinkSync],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    readlink: [Function: bound provide],
    readlinkSync: [Function: bound provideSync]
  },
  fileSystemInfo: FileSystemInfo {
    fs: CachedInputFileSystem {
      fileSystem: [Object],
      _lstatBackend: [CacheBackend],
      lstat: [Function: bound provide],
      lstatSync: [Function: bound provideSync],
      _statBackend: [CacheBackend],
      stat: [Function: bound provide],
      statSync: [Function: bound provideSync],
      _readdirBackend: [CacheBackend],
      readdir: [Function: bound provide],
      readdirSync: [Function: bound provideSync],
      _readFileBackend: [CacheBackend],
      readFile: [Function: bound provide],
      readFileSync: [Function: bound provideSync],
      _readJsonBackend: [CacheBackend],
      readJson: [Function: bound provide],
      readJsonSync: [Function: bound provideSync],
      _readlinkBackend: [CacheBackend],
      readlink: [Function: bound provide],
      readlinkSync: [Function: bound provideSync]
    },
    logger: WebpackLogger {
      getChildLogger: [Function (anonymous)],
      [Symbol(webpack logger raw log method)]: [Function (anonymous)]
    },
    _remainingLogs: 40,
    _loggedPaths: Set(0) {},
    _hashFunction: 'md4',
    _snapshotCache: WeakMap { <items unknown> },
    _fileTimestampsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: true,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _fileHashesOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _fileTshsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: true,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _contextTimestampsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: true,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _contextHashesOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _contextTshsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: true,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _missingExistenceOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _managedItemInfoOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _managedFilesOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: true,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _managedContextsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: true,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _managedMissingOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: true,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _fileTimestamps: StackedCacheMap { map: Map(0) {}, stack: [] },
    _fileHashes: Map(0) {},
    _fileTshs: Map(0) {},
    _contextTimestamps: StackedCacheMap { map: Map(0) {}, stack: [] },
    _contextHashes: Map(0) {},
    _contextTshs: Map(0) {},
    _managedItems: Map(0) {},
    fileTimestampQueue: <ref *3> AsyncQueue {
      _name: 'file timestamp',
      _parallelism: 30,
      _processor: [Function: bound _readFileTimestamp],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *3],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    fileHashQueue: <ref *4> AsyncQueue {
      _name: 'file hash',
      _parallelism: 10,
      _processor: [Function: bound _readFileHash],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *4],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    contextTimestampQueue: <ref *5> AsyncQueue {
      _name: 'context timestamp',
      _parallelism: 2,
      _processor: [Function: bound _readContextTimestamp],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *5],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    contextHashQueue: <ref *6> AsyncQueue {
      _name: 'context hash',
      _parallelism: 2,
      _processor: [Function: bound _readContextHash],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *6],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    contextTshQueue: <ref *7> AsyncQueue {
      _name: 'context hash and timestamp',
      _parallelism: 2,
      _processor: [Function: bound _readContextTimestampAndHash],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *7],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    managedItemQueue: <ref *8> AsyncQueue {
      _name: 'managed item info',
      _parallelism: 10,
      _processor: [Function: bound _getManagedItemInfo],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *8],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    managedItemDirectoryQueue: <ref *9> AsyncQueue {
      _name: 'managed item directory info',
      _parallelism: 10,
      _processor: [Function: bound _getManagedItemDirectoryInfo],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *9],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    managedPaths: [ '/Users/ayushajay/Desktop/Webpack_demo/node_modules/' ],
    managedPathsWithSlash: [ '/Users/ayushajay/Desktop/Webpack_demo/node_modules/' ],
    managedPathsRegExps: [],
    immutablePaths: [],
    immutablePathsWithSlash: [],
    immutablePathsRegExps: [],
    _cachedDeprecatedFileTimestamps: undefined,
    _cachedDeprecatedContextTimestamps: undefined,
    _warnAboutExperimentalEsmTracking: false,
    _statCreatedSnapshots: 0,
    _statTestedSnapshotsCached: 0,
    _statTestedSnapshotsNotCached: 0,
    _statTestedChildrenCached: 0,
    _statTestedChildrenNotCached: 0,
    _statTestedEntries: 0
  },
  valueCacheVersions: Map(0) {},
  requestShortener: RequestShortener { contextify: [Function: boundFn] },
  compilerPath: '',
  logger: WebpackLogger {
    getChildLogger: [Function (anonymous)],
    [Symbol(webpack logger raw log method)]: [Function (anonymous)]
  },
  options: {
    amd: undefined,
    bail: undefined,
    cache: {
      type: 'memory',
      maxGenerations: Infinity,
      cacheUnaffected: false
    },
    context: '/Users/ayushajay/Desktop/Webpack_demo',
    dependencies: undefined,
    devServer: { allowedHosts: 'all' },
    devtool: 'eval',
    entry: { bundle: [Object] },
    experiments: {
      buildHttp: undefined,
      lazyCompilation: undefined,
      css: undefined,
      futureDefaults: false,
      backCompat: true,
      syncWebAssembly: false,
      asyncWebAssembly: false,
      outputModule: false,
      layers: false,
      cacheUnaffected: false,
      topLevelAwait: true
    },
    externals: undefined,
    externalsPresets: {
      web: true,
      node: false,
      nwjs: false,
      electron: false,
      electronMain: false,
      electronPreload: false,
      electronRenderer: false
    },
    externalsType: 'var',
    ignoreWarnings: undefined,
    infrastructureLogging: {
      stream: [WriteStream],
      level: 'info',
      debug: false,
      colors: true,
      appendOnly: false
    },
    loader: { target: 'web', environment: [Object] },
    mode: 'development',
    module: {
      noParse: undefined,
      unsafeCache: [Function (anonymous)],
      parser: [Object],
      generator: {},
      defaultRules: [Array],
      rules: [Array]
    },
    name: undefined,
    node: { global: true, __filename: 'mock', __dirname: 'mock' },
    optimization: {
      runtimeChunk: false,
      splitChunks: [Object],
      emitOnErrors: true,
      removeAvailableModules: false,
      removeEmptyChunks: true,
      mergeDuplicateChunks: true,
      flagIncludedChunks: false,
      moduleIds: 'named',
      chunkIds: 'named',
      sideEffects: 'flag',
      providedExports: true,
      usedExports: false,
      innerGraph: false,
      mangleExports: false,
      concatenateModules: false,
      checkWasmTypes: false,
      mangleWasmImports: false,
      portableRecords: false,
      realContentHash: false,
      minimize: false,
      minimizer: [Array],
      nodeEnv: 'development'
    },
    output: {
      assetModuleFilename: '[hash][ext][query]',
      asyncChunks: true,
      charset: true,
      chunkFilename: '[name].js',
      chunkFormat: 'array-push',
      chunkLoading: 'jsonp',
      chunkLoadingGlobal: 'webpackChunkwebpack_demo',
      chunkLoadTimeout: 120000,
      cssFilename: '[name].css',
      cssChunkFilename: '[name].css',
      clean: undefined,
      compareBeforeEmit: true,
      crossOriginLoading: false,
      devtoolFallbackModuleFilenameTemplate: undefined,
      devtoolModuleFilenameTemplate: undefined,
      devtoolNamespace: 'webpack_demo',
      environment: [Object],
      enabledChunkLoadingTypes: [Array],
      enabledLibraryTypes: [],
      enabledWasmLoadingTypes: [Array],
      filename: '[name].js',
      globalObject: 'self',
      hashDigest: 'hex',
      hashDigestLength: 20,
      hashFunction: 'md4',
      hashSalt: undefined,
      hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
      hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
      hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
      ignoreBrowserWarnings: undefined,
      iife: true,
      importFunctionName: 'import',
      importMetaName: 'import.meta',
      scriptType: false,
      library: undefined,
      module: false,
      path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      pathinfo: true,
      publicPath: 'auto',
      sourceMapFilename: '[file].map[query]',
      sourcePrefix: undefined,
      strictModuleExceptionHandling: false,
      trustedTypes: undefined,
      uniqueName: 'webpack_demo',
      wasmLoading: 'fetch',
      webassemblyModuleFilename: '[hash].module.wasm',
      workerPublicPath: '',
      workerChunkLoading: 'import-scripts',
      workerWasmLoading: 'fetch'
    },
    parallelism: 100,
    performance: false,
    plugins: [
      [CLIPlugin],
      [CircularDependencyPlugin],
      [HtmlWebpackPlugin],
      PrintChunksPlugin {},
      [NormalModuleReplacementPlugin]
    ],
    profile: false,
    recordsInputPath: false,
    recordsOutputPath: false,
    resolve: {
      byDependency: [Object],
      cache: true,
      modules: [Array],
      conditionNames: [Array],
      mainFiles: [Array],
      extensions: [],
      aliasFields: [],
      exportsFields: [Array],
      roots: [Array],
      mainFields: [Array]
    },
    resolveLoader: {
      cache: true,
      conditionNames: [Array],
      exportsFields: [Array],
      mainFields: [Array],
      extensions: [Array],
      mainFiles: [Array]
    },
    snapshot: {
      resolveBuildDependencies: [Object],
      buildDependencies: [Object],
      resolve: [Object],
      module: [Object],
      immutablePaths: [],
      managedPaths: [Array]
    },
    stats: { preset: 'normal', colors: false },
    target: 'web',
    watch: false,
    watchOptions: {}
  },
  outputOptions: {
    assetModuleFilename: '[hash][ext][query]',
    asyncChunks: true,
    charset: true,
    chunkFilename: '[name].js',
    chunkFormat: 'array-push',
    chunkLoading: 'jsonp',
    chunkLoadingGlobal: 'webpackChunkwebpack_demo',
    chunkLoadTimeout: 120000,
    cssFilename: '[name].css',
    cssChunkFilename: '[name].css',
    clean: undefined,
    compareBeforeEmit: true,
    crossOriginLoading: false,
    devtoolFallbackModuleFilenameTemplate: undefined,
    devtoolModuleFilenameTemplate: undefined,
    devtoolNamespace: 'webpack_demo',
    environment: {
      globalThis: undefined,
      bigIntLiteral: undefined,
      const: true,
      arrowFunction: true,
      forOf: true,
      destructuring: true,
      optionalChaining: true,
      templateLiteral: true,
      dynamicImport: undefined,
      dynamicImportInWorker: undefined,
      module: undefined
    },
    enabledChunkLoadingTypes: [ 'jsonp', 'import-scripts' ],
    enabledLibraryTypes: [],
    enabledWasmLoadingTypes: [ 'fetch' ],
    filename: '[name].js',
    globalObject: 'self',
    hashDigest: 'hex',
    hashDigestLength: 20,
    hashFunction: 'md4',
    hashSalt: undefined,
    hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
    hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
    hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
    ignoreBrowserWarnings: undefined,
    iife: true,
    importFunctionName: 'import',
    importMetaName: 'import.meta',
    scriptType: false,
    library: undefined,
    module: false,
    path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
    pathinfo: true,
    publicPath: 'auto',
    sourceMapFilename: '[file].map[query]',
    sourcePrefix: undefined,
    strictModuleExceptionHandling: false,
    trustedTypes: undefined,
    uniqueName: 'webpack_demo',
    wasmLoading: 'fetch',
    webassemblyModuleFilename: '[hash].module.wasm',
    workerPublicPath: '',
    workerChunkLoading: 'import-scripts',
    workerWasmLoading: 'fetch'
  },
  bail: false,
  profile: false,
  params: {
    normalModuleFactory: NormalModuleFactory {
      hooks: [Object],
      resolverFactory: [ResolverFactory],
      ruleSet: [Object],
      context: '/Users/ayushajay/Desktop/Webpack_demo',
      fs: [CachedInputFileSystem],
      _globalParserOptions: [Object],
      _globalGeneratorOptions: {},
      parserCache: Map(0) {},
      generatorCache: Map(0) {},
      _restoredUnsafeCacheEntries: Set(0) {},
      _parseResourceWithoutFragment: [Function (anonymous)]
    },
    contextModuleFactory: ContextModuleFactory {
      hooks: [Object],
      resolverFactory: [ResolverFactory]
    }
  },
  mainTemplate: MainTemplate {
    _outputOptions: {
      assetModuleFilename: '[hash][ext][query]',
      asyncChunks: true,
      charset: true,
      chunkFilename: '[name].js',
      chunkFormat: 'array-push',
      chunkLoading: 'jsonp',
      chunkLoadingGlobal: 'webpackChunkwebpack_demo',
      chunkLoadTimeout: 120000,
      cssFilename: '[name].css',
      cssChunkFilename: '[name].css',
      clean: undefined,
      compareBeforeEmit: true,
      crossOriginLoading: false,
      devtoolFallbackModuleFilenameTemplate: undefined,
      devtoolModuleFilenameTemplate: undefined,
      devtoolNamespace: 'webpack_demo',
      environment: [Object],
      enabledChunkLoadingTypes: [Array],
      enabledLibraryTypes: [],
      enabledWasmLoadingTypes: [Array],
      filename: '[name].js',
      globalObject: 'self',
      hashDigest: 'hex',
      hashDigestLength: 20,
      hashFunction: 'md4',
      hashSalt: undefined,
      hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
      hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
      hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
      ignoreBrowserWarnings: undefined,
      iife: true,
      importFunctionName: 'import',
      importMetaName: 'import.meta',
      scriptType: false,
      library: undefined,
      module: false,
      path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      pathinfo: true,
      publicPath: 'auto',
      sourceMapFilename: '[file].map[query]',
      sourcePrefix: undefined,
      strictModuleExceptionHandling: false,
      trustedTypes: undefined,
      uniqueName: 'webpack_demo',
      wasmLoading: 'fetch',
      webassemblyModuleFilename: '[hash].module.wasm',
      workerPublicPath: '',
      workerChunkLoading: 'import-scripts',
      workerWasmLoading: 'fetch'
    },
    hooks: {
      renderManifest: [Object],
      modules: [Object],
      moduleObj: [Object],
      require: [Object],
      beforeStartup: [Object],
      startup: [Object],
      afterStartup: [Object],
      render: [Object],
      renderWithEntry: [Object],
      assetPath: [Object],
      hash: [Object],
      hashForChunk: [Object],
      globalHashPaths: [Object],
      globalHash: [Object],
      hotBootstrap: [Object],
      bootstrap: [Hook],
      localVars: [Hook],
      requireExtensions: [Hook],
      requireEnsure: [Hook],
      jsonpScript: [Getter],
      linkPrefetch: [Getter],
      linkPreload: [Getter]
    },
    renderCurrentHashCode: [Function: deprecated],
    getPublicPath: [Function: deprecated],
    getAssetPath: [Function: deprecated],
    getAssetPathWithInfo: [Function: deprecated]
  },
  chunkTemplate: ChunkTemplate {
    _outputOptions: {
      assetModuleFilename: '[hash][ext][query]',
      asyncChunks: true,
      charset: true,
      chunkFilename: '[name].js',
      chunkFormat: 'array-push',
      chunkLoading: 'jsonp',
      chunkLoadingGlobal: 'webpackChunkwebpack_demo',
      chunkLoadTimeout: 120000,
      cssFilename: '[name].css',
      cssChunkFilename: '[name].css',
      clean: undefined,
      compareBeforeEmit: true,
      crossOriginLoading: false,
      devtoolFallbackModuleFilenameTemplate: undefined,
      devtoolModuleFilenameTemplate: undefined,
      devtoolNamespace: 'webpack_demo',
      environment: [Object],
      enabledChunkLoadingTypes: [Array],
      enabledLibraryTypes: [],
      enabledWasmLoadingTypes: [Array],
      filename: '[name].js',
      globalObject: 'self',
      hashDigest: 'hex',
      hashDigestLength: 20,
      hashFunction: 'md4',
      hashSalt: undefined,
      hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
      hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
      hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
      ignoreBrowserWarnings: undefined,
      iife: true,
      importFunctionName: 'import',
      importMetaName: 'import.meta',
      scriptType: false,
      library: undefined,
      module: false,
      path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      pathinfo: true,
      publicPath: 'auto',
      sourceMapFilename: '[file].map[query]',
      sourcePrefix: undefined,
      strictModuleExceptionHandling: false,
      trustedTypes: undefined,
      uniqueName: 'webpack_demo',
      wasmLoading: 'fetch',
      webassemblyModuleFilename: '[hash].module.wasm',
      workerPublicPath: '',
      workerChunkLoading: 'import-scripts',
      workerWasmLoading: 'fetch'
    },
    hooks: {
      renderManifest: [Object],
      modules: [Object],
      render: [Object],
      renderWithEntry: [Object],
      hash: [Object],
      hashForChunk: [Object]
    }
  },
  runtimeTemplate: RuntimeTemplate {
    compilation: [Circular *2],
    outputOptions: {
      assetModuleFilename: '[hash][ext][query]',
      asyncChunks: true,
      charset: true,
      chunkFilename: '[name].js',
      chunkFormat: 'array-push',
      chunkLoading: 'jsonp',
      chunkLoadingGlobal: 'webpackChunkwebpack_demo',
      chunkLoadTimeout: 120000,
      cssFilename: '[name].css',
      cssChunkFilename: '[name].css',
      clean: undefined,
      compareBeforeEmit: true,
      crossOriginLoading: false,
      devtoolFallbackModuleFilenameTemplate: undefined,
      devtoolModuleFilenameTemplate: undefined,
      devtoolNamespace: 'webpack_demo',
      environment: [Object],
      enabledChunkLoadingTypes: [Array],
      enabledLibraryTypes: [],
      enabledWasmLoadingTypes: [Array],
      filename: '[name].js',
      globalObject: 'self',
      hashDigest: 'hex',
      hashDigestLength: 20,
      hashFunction: 'md4',
      hashSalt: undefined,
      hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
      hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
      hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
      ignoreBrowserWarnings: undefined,
      iife: true,
      importFunctionName: 'import',
      importMetaName: 'import.meta',
      scriptType: false,
      library: undefined,
      module: false,
      path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      pathinfo: true,
      publicPath: 'auto',
      sourceMapFilename: '[file].map[query]',
      sourcePrefix: undefined,
      strictModuleExceptionHandling: false,
      trustedTypes: undefined,
      uniqueName: 'webpack_demo',
      wasmLoading: 'fetch',
      webassemblyModuleFilename: '[hash].module.wasm',
      workerPublicPath: '',
      workerChunkLoading: 'import-scripts',
      workerWasmLoading: 'fetch'
    },
    requestShortener: RequestShortener { contextify: [Function: boundFn] },
    globalObject: 'self',
    contentHashReplacement: 'XXXXXXXXXXXXXXXXXXXX'
  },
  moduleTemplates: {
    javascript: ModuleTemplate {
      _runtimeTemplate: [RuntimeTemplate],
      type: 'javascript',
      hooks: [Object]
    }
  },
  moduleMemCaches: undefined,
  moduleMemCaches2: undefined,
  moduleGraph: ModuleGraph {
    _dependencyMap: WeakMap { <items unknown> },
    _moduleMap: Map(0) {},
    _metaMap: WeakMap { <items unknown> },
    _cache: undefined,
    _moduleMemCaches: undefined,
    _cacheStage: undefined
  },
  chunkGraph: undefined,
  codeGenerationResults: undefined,
  processDependenciesQueue: <ref *10> AsyncQueue {
    _name: 'processDependencies',
    _parallelism: 100,
    _processor: [Function: bound _processModuleDependencies],
    _getKey: [Function (anonymous)],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: [ [AsyncQueue], [AsyncQueue], [AsyncQueue] ],
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: [Circular *10],
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  addModuleQueue: AsyncQueue {
    _name: 'addModule',
    _parallelism: 1,
    _processor: [Function: bound _addModule],
    _getKey: [Function: getKey],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: undefined,
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: <ref *10> AsyncQueue {
      _name: 'processDependencies',
      _parallelism: 100,
      _processor: [Function: bound _processModuleDependencies],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: [Array],
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *10],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  factorizeQueue: AsyncQueue {
    _name: 'factorize',
    _parallelism: 1,
    _processor: [Function: bound _factorizeModule],
    _getKey: [Function (anonymous)],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: undefined,
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: <ref *10> AsyncQueue {
      _name: 'processDependencies',
      _parallelism: 100,
      _processor: [Function: bound _processModuleDependencies],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: [Array],
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *10],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  buildQueue: AsyncQueue {
    _name: 'build',
    _parallelism: 1,
    _processor: [Function: bound _buildModule],
    _getKey: [Function (anonymous)],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: undefined,
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: <ref *10> AsyncQueue {
      _name: 'processDependencies',
      _parallelism: 100,
      _processor: [Function: bound _processModuleDependencies],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: [Array],
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *10],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  rebuildQueue: <ref *11> AsyncQueue {
    _name: 'rebuild',
    _parallelism: 100,
    _processor: [Function: bound _rebuildModule],
    _getKey: [Function (anonymous)],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: undefined,
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: [Circular *11],
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  creatingModuleDuringBuild: WeakMap { <items unknown> },
  entries: Map(0) {},
  globalEntry: {
    dependencies: [],
    includeDependencies: [],
    options: { name: undefined }
  },
  entrypoints: Map(0) {},
  asyncEntrypoints: [],
  chunks: Set(0) {
    concat: [Function (anonymous)],
    entry: [Function (anonymous)],
    filter: [Function (anonymous)],
    find: [Function (anonymous)],
    findIndex: [Function (anonymous)],
    includes: [Function (anonymous)],
    indexOf: [Function (anonymous)],
    join: [Function (anonymous)],
    lastIndexOf: [Function (anonymous)],
    map: [Function (anonymous)],
    reduce: [Function (anonymous)],
    reduceRight: [Function (anonymous)],
    slice: [Function (anonymous)],
    some: [Function (anonymous)],
    push: [Function (anonymous)],
    copyWithin: [Function (anonymous)],
    fill: [Function (anonymous)],
    pop: [Function (anonymous)],
    reverse: [Function (anonymous)],
    shift: [Function (anonymous)],
    splice: [Function (anonymous)],
    sort: [Function (anonymous)],
    unshift: [Function (anonymous)],
    [Symbol(Symbol.isConcatSpreadable)]: true
  },
  chunkGroups: [],
  namedChunkGroups: Map(0) {},
  namedChunks: Map(0) {},
  modules: Set(0) {
    concat: [Function (anonymous)],
    entry: [Function (anonymous)],
    filter: [Function (anonymous)],
    find: [Function (anonymous)],
    findIndex: [Function (anonymous)],
    includes: [Function (anonymous)],
    indexOf: [Function (anonymous)],
    join: [Function (anonymous)],
    lastIndexOf: [Function (anonymous)],
    map: [Function (anonymous)],
    reduce: [Function (anonymous)],
    reduceRight: [Function (anonymous)],
    slice: [Function (anonymous)],
    some: [Function (anonymous)],
    push: [Function (anonymous)],
    copyWithin: [Function (anonymous)],
    fill: [Function (anonymous)],
    pop: [Function (anonymous)],
    reverse: [Function (anonymous)],
    shift: [Function (anonymous)],
    splice: [Function (anonymous)],
    sort: [Function (anonymous)],
    unshift: [Function (anonymous)],
    [Symbol(Symbol.isConcatSpreadable)]: true
  },
  _modules: Map(0) {},
  records: {},
  additionalChunkAssets: [],
  assets: {},
  assetsInfo: Map(0) {},
  _assetsRelatedIn: Map(0) {},
  errors: [],
  warnings: [],
  children: [],
  logging: Map(0) {},
  dependencyFactories: Map(1) {
    [class WorkerDependency extends ModuleDependency] {
      Template: [Function: WorkerDependencyTemplate]
    } => NormalModuleFactory {
      hooks: [Object],
      resolverFactory: [ResolverFactory],
      ruleSet: [Object],
      context: '/Users/ayushajay/Desktop/Webpack_demo',
      fs: [CachedInputFileSystem],
      _globalParserOptions: [Object],
      _globalGeneratorOptions: {},
      parserCache: Map(0) {},
      generatorCache: Map(0) {},
      _restoredUnsafeCacheEntries: Set(0) {},
      _parseResourceWithoutFragment: [Function (anonymous)]
    }
  },
  dependencyTemplates: DependencyTemplates {
    _map: Map(2) {
      [Function] => WorkerDependencyTemplate {},
      [Function] => CreateScriptUrlDependencyTemplate {}
    },
    _hash: '31d6cfe0d16ae931b73c59d7e0c089c0',
    _hashFunction: 'md4'
  },
  childrenCounters: {},
  usedChunkIds: null,
  usedModuleIds: null,
  needAdditionalPass: false,
  _restoredUnsafeCacheModuleEntries: Set(0) {},
  _restoredUnsafeCacheEntries: Map(0) {},
  builtModules: WeakSet { <items unknown> },
  codeGeneratedModules: WeakSet { <items unknown> },
  buildTimeExecutedModules: WeakSet { <items unknown> },
  _rebuildingModules: Map(0) {},
  emittedAssets: Set(0) {},
  comparedForEmitAssets: Set(0) {},
  fileDependencies: LazySet {
    _set: Set(0) {},
    _toMerge: Set(0) {},
    _toDeepMerge: [],
    _needMerge: false,
    _deopt: false
  },
  contextDependencies: LazySet {
    _set: Set(0) {},
    _toMerge: Set(0) {},
    _toDeepMerge: [],
    _needMerge: false,
    _deopt: false
  },
  missingDependencies: LazySet {
    _set: Set(0) {},
    _toMerge: Set(0) {},
    _toDeepMerge: [],
    _needMerge: false,
    _deopt: false
  },
  buildDependencies: LazySet {
    _set: Set(0) {},
    _toMerge: Set(0) {},
    _toDeepMerge: [],
    _needMerge: false,
    _deopt: false
  },
  compilationDependencies: { add: [Function: deprecated] },
  _modulesCache: CacheFacade {
    _cache: Cache { hooks: [Object] },
    _name: 'Compilation/modules',
    _hashFunction: 'md4'
  },
  _assetsCache: CacheFacade {
    _cache: Cache { hooks: [Object] },
    _name: 'Compilation/assets',
    _hashFunction: 'md4'
  },
  _codeGenerationCache: CacheFacade {
    _cache: Cache { hooks: [Object] },
    _name: 'Compilation/codeGeneration',
    _hashFunction: 'md4'
  },
  _unsafeCache: true,
  _unsafeCachePredicate: [Function (anonymous)]
}
<ref *2> Compilation {
  _backCompat: true,
  hooks: {
    buildModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    rebuildModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    failedModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    succeedModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    stillValidModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    addEntry: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    failedEntry: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    succeedEntry: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    dependencyReferencedExports: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    executeModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    prepareModuleExecution: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncParallelHook]
    },
    finishModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    finishRebuildingModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    unseal: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    seal: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeChunks: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeDependencies: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    afterOptimizeDependencies: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimize: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    afterOptimizeModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    afterOptimizeChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeTree: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    afterOptimizeTree: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeChunkModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesBailHook]
    },
    afterOptimizeChunkModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    shouldRecord: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    additionalChunkRuntimeRequirements: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    runtimeRequirementInChunk: HookMap {
      _map: Map(0) {},
      name: undefined,
      _factory: [Function (anonymous)],
      _interceptors: []
    },
    additionalModuleRuntimeRequirements: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    runtimeRequirementInModule: HookMap {
      _map: Map(0) {},
      name: undefined,
      _factory: [Function (anonymous)],
      _interceptors: []
    },
    additionalTreeRuntimeRequirements: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    runtimeRequirementInTree: HookMap {
      _map: [Map],
      name: undefined,
      _factory: [Function (anonymous)],
      _interceptors: []
    },
    runtimeModule: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    reviveModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeModuleIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    moduleIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeModuleIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterOptimizeModuleIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    reviveChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeChunkIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    chunkIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeChunkIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterOptimizeChunkIds: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    recordModules: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    recordChunks: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    optimizeCodeGeneration: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeModuleHash: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterModuleHash: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeCodeGeneration: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterCodeGeneration: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeRuntimeRequirements: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterRuntimeRequirements: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeHash: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    contentHash: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    afterHash: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    recordHash: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    record: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    beforeModuleAssets: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    shouldGenerateChunkAssets: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    beforeChunkAssets: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    additionalChunkAssets: {
      name: [Getter/Setter],
      intercept: [Function: deprecated],
      tap: [Function: deprecated],
      tapAsync: [Function: deprecated],
      tapPromise: [Function: deprecated],
      _fakeHook: true
    },
    additionalAssets: {
      name: 'additionalAssets',
      intercept: [Function: intercept],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      _fakeHook: true
    },
    optimizeChunkAssets: {
      name: [Getter/Setter],
      intercept: [Function: deprecated],
      tap: [Function: deprecated],
      tapAsync: [Function: deprecated],
      tapPromise: [Function: deprecated],
      _fakeHook: true
    },
    afterOptimizeChunkAssets: {
      name: [Getter/Setter],
      intercept: [Function: deprecated],
      tap: [Function: deprecated],
      tapAsync: [Function: deprecated],
      tapPromise: [Function: deprecated],
      _fakeHook: true
    },
    optimizeAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [Array],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    afterOptimizeAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    processAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [Array],
      interceptors: [Array],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    afterProcessAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    processAdditionalAssets: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    needAdditionalSeal: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    afterSeal: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: undefined,
      call: undefined,
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: tapAsync],
      tapPromise: [Function: tapPromise],
      constructor: [Function: AsyncSeriesHook]
    },
    renderManifest: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    fullHash: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    chunkHash: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    moduleAsset: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    chunkAsset: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    assetPath: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    needAdditionalPass: Hook {
      _args: [],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    childCompiler: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    log: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncBailHook]
    },
    processWarnings: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    processErrors: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncWaterfallHook]
    },
    statsPreset: HookMap {
      _map: Map(0) {},
      name: undefined,
      _factory: [Function (anonymous)],
      _interceptors: []
    },
    statsNormalize: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    statsFactory: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    statsPrinter: Hook {
      _args: [Array],
      name: undefined,
      taps: [],
      interceptors: [],
      _call: [Function: CALL_DELEGATE],
      call: [Function: CALL_DELEGATE],
      _callAsync: [Function: CALL_ASYNC_DELEGATE],
      callAsync: [Function: CALL_ASYNC_DELEGATE],
      _promise: [Function: PROMISE_DELEGATE],
      promise: [Function: PROMISE_DELEGATE],
      _x: undefined,
      compile: [Function: COMPILE],
      tap: [Function: tap],
      tapAsync: [Function: TAP_ASYNC],
      tapPromise: [Function: TAP_PROMISE],
      constructor: [Function: SyncHook]
    },
    normalModuleLoader: [Getter]
  },
  name: 'HtmlWebpackCompiler',
  startTime: undefined,
  endTime: undefined,
  compiler: Compiler {
    hooks: {
      initialize: [Hook],
      shouldEmit: [Hook],
      done: [Hook],
      afterDone: [Hook],
      additionalPass: [Hook],
      beforeRun: [Hook],
      run: [Hook],
      emit: [Hook],
      assetEmitted: [Hook],
      afterEmit: [Hook],
      thisCompilation: [Hook],
      compilation: [Hook],
      normalModuleFactory: [Hook],
      contextModuleFactory: [Hook],
      beforeCompile: [Hook],
      compile: [Hook],
      make: [Hook],
      finishMake: [Hook],
      afterCompile: [Hook],
      readRecords: [Hook],
      emitRecords: [Hook],
      watchRun: [Hook],
      failed: [Hook],
      invalid: [Hook],
      watchClose: [Hook],
      shutdown: [Hook],
      infrastructureLog: [Hook],
      environment: [Hook],
      afterEnvironment: [Hook],
      afterPlugins: [Hook],
      afterResolvers: [Hook],
      entryOption: [Hook]
    },
    webpack: [Function: f] {
      webpack: [Getter],
      validate: [Getter],
      validateSchema: [Getter],
      version: [Getter],
      cli: [Getter],
      AutomaticPrefetchPlugin: [Getter],
      AsyncDependenciesBlock: [Getter],
      BannerPlugin: [Getter],
      Cache: [Getter],
      Chunk: [Getter],
      ChunkGraph: [Getter],
      CleanPlugin: [Getter],
      Compilation: [Getter],
      Compiler: [Getter],
      ConcatenationScope: [Getter],
      ContextExclusionPlugin: [Getter],
      ContextReplacementPlugin: [Getter],
      DefinePlugin: [Getter],
      DelegatedPlugin: [Getter],
      Dependency: [Getter],
      DllPlugin: [Getter],
      DllReferencePlugin: [Getter],
      DynamicEntryPlugin: [Getter],
      EntryOptionPlugin: [Getter],
      EntryPlugin: [Getter],
      EnvironmentPlugin: [Getter],
      EvalDevToolModulePlugin: [Getter],
      EvalSourceMapDevToolPlugin: [Getter],
      ExternalModule: [Getter],
      ExternalsPlugin: [Getter],
      Generator: [Getter],
      HotUpdateChunk: [Getter],
      HotModuleReplacementPlugin: [Getter],
      IgnorePlugin: [Getter],
      JavascriptModulesPlugin: [Getter],
      LibManifestPlugin: [Getter],
      LibraryTemplatePlugin: [Getter],
      LoaderOptionsPlugin: [Getter],
      LoaderTargetPlugin: [Getter],
      Module: [Getter],
      ModuleFilenameHelpers: [Getter],
      ModuleGraph: [Getter],
      ModuleGraphConnection: [Getter],
      NoEmitOnErrorsPlugin: [Getter],
      NormalModule: [Getter],
      NormalModuleReplacementPlugin: [Getter],
      MultiCompiler: [Getter],
      Parser: [Getter],
      PrefetchPlugin: [Getter],
      ProgressPlugin: [Getter],
      ProvidePlugin: [Getter],
      RuntimeGlobals: [Getter],
      RuntimeModule: [Getter],
      SingleEntryPlugin: [Getter],
      SourceMapDevToolPlugin: [Getter],
      Stats: [Getter],
      Template: [Getter],
      UsageState: [Getter],
      WatchIgnorePlugin: [Getter],
      WebpackError: [Getter],
      WebpackOptionsApply: [Getter],
      WebpackOptionsDefaulter: [Getter],
      WebpackOptionsValidationError: [Getter],
      ValidationError: [Getter],
      cache: [Object],
      config: [Object],
      dependencies: [Object],
      ids: [Object],
      javascript: [Object],
      optimize: [Object],
      runtime: [Object],
      prefetch: [Object],
      web: [Object],
      webworker: [Object],
      node: [Object],
      electron: [Object],
      wasm: [Object],
      library: [Object],
      container: [Object],
      sharing: [Object],
      debug: [Object],
      util: [Object],
      sources: [Getter],
      experiments: [Object]
    },
    name: 'HtmlWebpackCompiler',
    parentCompilation: Compilation {
      _backCompat: true,
      hooks: [Object],
      name: undefined,
      startTime: undefined,
      endTime: undefined,
      compiler: [Compiler],
      resolverFactory: [ResolverFactory],
      inputFileSystem: [CachedInputFileSystem],
      fileSystemInfo: [FileSystemInfo],
      valueCacheVersions: [Map],
      requestShortener: [RequestShortener],
      compilerPath: '',
      logger: [WebpackLogger],
      options: [Object],
      outputOptions: [Object],
      bail: false,
      profile: false,
      params: [Object],
      mainTemplate: [MainTemplate],
      chunkTemplate: [ChunkTemplate],
      runtimeTemplate: [RuntimeTemplate],
      moduleTemplates: [Object],
      moduleMemCaches: undefined,
      moduleMemCaches2: undefined,
      moduleGraph: [ModuleGraph],
      chunkGraph: undefined,
      codeGenerationResults: undefined,
      processDependenciesQueue: [AsyncQueue],
      addModuleQueue: [AsyncQueue],
      factorizeQueue: [AsyncQueue],
      buildQueue: [AsyncQueue],
      rebuildQueue: [AsyncQueue],
      creatingModuleDuringBuild: [WeakMap],
      entries: [Map],
      globalEntry: [Object],
      entrypoints: Map(0) {},
      asyncEntrypoints: [],
      chunks: [Set],
      chunkGroups: [],
      namedChunkGroups: Map(0) {},
      namedChunks: Map(0) {},
      modules: [Set],
      _modules: Map(0) {},
      records: [Object],
      additionalChunkAssets: [],
      assets: {},
      assetsInfo: Map(0) {},
      _assetsRelatedIn: Map(0) {},
      errors: [],
      warnings: [],
      children: [],
      logging: Map(0) {},
      dependencyFactories: [Map],
      dependencyTemplates: [DependencyTemplates],
      childrenCounters: [Object],
      usedChunkIds: null,
      usedModuleIds: null,
      needAdditionalPass: false,
      _restoredUnsafeCacheModuleEntries: Set(0) {},
      _restoredUnsafeCacheEntries: Map(0) {},
      builtModules: [WeakSet],
      codeGeneratedModules: [WeakSet],
      buildTimeExecutedModules: [WeakSet],
      _rebuildingModules: Map(0) {},
      emittedAssets: Set(0) {},
      comparedForEmitAssets: Set(0) {},
      fileDependencies: [LazySet],
      contextDependencies: [LazySet],
      missingDependencies: [LazySet],
      buildDependencies: [LazySet],
      compilationDependencies: [Object],
      _modulesCache: [CacheFacade],
      _assetsCache: [CacheFacade],
      _codeGenerationCache: [CacheFacade],
      _unsafeCache: true,
      _unsafeCachePredicate: [Function (anonymous)]
    },
    root: <ref *1> Compiler {
      hooks: [Object],
      webpack: [Function],
      name: undefined,
      parentCompilation: undefined,
      root: [Circular *1],
      outputPath: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      watching: undefined,
      outputFileSystem: [Object],
      intermediateFileSystem: [Object],
      inputFileSystem: [CachedInputFileSystem],
      watchFileSystem: [NodeWatchFileSystem],
      recordsInputPath: null,
      recordsOutputPath: null,
      records: [Object],
      managedPaths: [Set],
      immutablePaths: Set(0) {},
      modifiedFiles: undefined,
      removedFiles: undefined,
      fileTimestamps: undefined,
      contextTimestamps: undefined,
      fsStartTime: 1685866856571,
      resolverFactory: [ResolverFactory],
      infrastructureLogger: [Function: logger],
      options: [Object],
      context: '/Users/ayushajay/Desktop/Webpack_demo',
      requestShortener: [RequestShortener],
      cache: [Cache],
      moduleMemCaches: undefined,
      compilerPath: '',
      running: true,
      idle: false,
      watchMode: false,
      _backCompat: true,
      _lastCompilation: [Compilation],
      _lastNormalModuleFactory: [NormalModuleFactory],
      _assetEmittingSourceCache: [WeakMap],
      _assetEmittingWrittenFiles: Map(0) {},
      _assetEmittingPreviousFiles: Set(0) {}
    },
    outputPath: '/Users/ayushajay/Desktop/Webpack_demo/dist',
    watching: undefined,
    outputFileSystem: null,
    intermediateFileSystem: null,
    inputFileSystem: CachedInputFileSystem {
      fileSystem: [Object],
      _lstatBackend: [CacheBackend],
      lstat: [Function: bound provide],
      lstatSync: [Function: bound provideSync],
      _statBackend: [CacheBackend],
      stat: [Function: bound provide],
      statSync: [Function: bound provideSync],
      _readdirBackend: [CacheBackend],
      readdir: [Function: bound provide],
      readdirSync: [Function: bound provideSync],
      _readFileBackend: [CacheBackend],
      readFile: [Function: bound provide],
      readFileSync: [Function: bound provideSync],
      _readJsonBackend: [CacheBackend],
      readJson: [Function: bound provide],
      readJsonSync: [Function: bound provideSync],
      _readlinkBackend: [CacheBackend],
      readlink: [Function: bound provide],
      readlinkSync: [Function: bound provideSync]
    },
    watchFileSystem: null,
    recordsInputPath: null,
    recordsOutputPath: null,
    records: {},
    managedPaths: Set(0) {},
    immutablePaths: Set(0) {},
    modifiedFiles: undefined,
    removedFiles: undefined,
    fileTimestamps: undefined,
    contextTimestamps: undefined,
    fsStartTime: 1685866856571,
    resolverFactory: ResolverFactory { hooks: [Object], cache: Map(0) {} },
    infrastructureLogger: undefined,
    options: {
      amd: undefined,
      bail: undefined,
      cache: [Object],
      context: '/Users/ayushajay/Desktop/Webpack_demo',
      dependencies: undefined,
      devServer: [Object],
      devtool: 'eval',
      entry: [Object],
      experiments: [Object],
      externals: undefined,
      externalsPresets: [Object],
      externalsType: 'var',
      ignoreWarnings: undefined,
      infrastructureLogging: [Object],
      loader: [Object],
      mode: 'development',
      module: [Object],
      name: undefined,
      node: [Object],
      optimization: [Object],
      output: [Object],
      parallelism: 100,
      performance: false,
      plugins: [Array],
      profile: false,
      recordsInputPath: false,
      recordsOutputPath: false,
      resolve: [Object],
      resolveLoader: [Object],
      snapshot: [Object],
      stats: [Object],
      target: 'web',
      watch: false,
      watchOptions: {}
    },
    context: '/Users/ayushajay/Desktop/Webpack_demo',
    requestShortener: RequestShortener { contextify: [Function: boundFn] },
    cache: Cache { hooks: [Object] },
    moduleMemCaches: undefined,
    compilerPath: 'HtmlWebpackCompiler|0|',
    running: false,
    idle: false,
    watchMode: false,
    _backCompat: true,
    _lastCompilation: [Circular *2],
    _lastNormalModuleFactory: NormalModuleFactory {
      hooks: [Object],
      resolverFactory: [ResolverFactory],
      ruleSet: [Object],
      context: '/Users/ayushajay/Desktop/Webpack_demo',
      fs: [CachedInputFileSystem],
      _globalParserOptions: [Object],
      _globalGeneratorOptions: {},
      parserCache: Map(0) {},
      generatorCache: Map(0) {},
      _restoredUnsafeCacheEntries: Set(0) {},
      _parseResourceWithoutFragment: [Function (anonymous)]
    },
    _assetEmittingSourceCache: WeakMap { <items unknown> },
    _assetEmittingWrittenFiles: Map(0) {},
    _assetEmittingPreviousFiles: Set(0) {}
  },
  resolverFactory: ResolverFactory {
    hooks: { resolveOptions: [HookMap], resolver: [HookMap] },
    cache: Map(0) {}
  },
  inputFileSystem: CachedInputFileSystem {
    fileSystem: {
      appendFile: [Function: appendFile],
      appendFileSync: [Function: appendFileSync],
      access: [Function: access],
      accessSync: [Function: accessSync],
      chown: [Function (anonymous)],
      chownSync: [Function (anonymous)],
      chmod: [Function (anonymous)],
      chmodSync: [Function (anonymous)],
      close: [Function: close],
      closeSync: [Function: closeSync],
      copyFile: [Function: copyFile],
      copyFileSync: [Function: copyFileSync],
      cp: [Function: cp],
      cpSync: [Function: cpSync],
      createReadStream: [Function: createReadStream],
      createWriteStream: [Function: createWriteStream],
      exists: [Function: exists],
      existsSync: [Function: existsSync],
      fchown: [Function (anonymous)],
      fchownSync: [Function (anonymous)],
      fchmod: [Function (anonymous)],
      fchmodSync: [Function (anonymous)],
      fdatasync: [Function: fdatasync],
      fdatasyncSync: [Function: fdatasyncSync],
      fstat: [Function (anonymous)],
      fstatSync: [Function (anonymous)],
      fsync: [Function: fsync],
      fsyncSync: [Function: fsyncSync],
      ftruncate: [Function: ftruncate],
      ftruncateSync: [Function: ftruncateSync],
      futimes: [Function: futimes],
      futimesSync: [Function: futimesSync],
      lchown: [Function (anonymous)],
      lchownSync: [Function (anonymous)],
      lchmod: [Function (anonymous)],
      lchmodSync: [Function (anonymous)],
      link: [Function: link],
      linkSync: [Function: linkSync],
      lstat: [Function (anonymous)],
      lstatSync: [Function (anonymous)],
      lutimes: [Function: lutimes],
      lutimesSync: [Function: lutimesSync],
      mkdir: [Function: mkdir],
      mkdirSync: [Function: mkdirSync],
      mkdtemp: [Function: mkdtemp],
      mkdtempSync: [Function: mkdtempSync],
      open: [Function: open],
      openSync: [Function: openSync],
      opendir: [Function: opendir],
      opendirSync: [Function: opendirSync],
      readdir: [Function: readdir],
      readdirSync: [Function: readdirSync],
      read: [Function: read],
      readSync: [Function (anonymous)],
      readv: [Function: readv],
      readvSync: [Function: readvSync],
      readFile: [Function: readFile],
      readFileSync: [Function: readFileSync],
      readlink: [Function: readlink],
      readlinkSync: [Function: readlinkSync],
      realpath: [Function],
      realpathSync: [Function],
      rename: [Function: rename],
      renameSync: [Function: renameSync],
      rm: [Function: rm],
      rmSync: [Function: rmSync],
      rmdir: [Function: rmdir],
      rmdirSync: [Function: rmdirSync],
      stat: [Function (anonymous)],
      statfs: [Function: statfs],
      statSync: [Function (anonymous)],
      statfsSync: [Function: statfsSync],
      symlink: [Function: symlink],
      symlinkSync: [Function: symlinkSync],
      truncate: [Function: truncate],
      truncateSync: [Function: truncateSync],
      unwatchFile: [Function: unwatchFile],
      unlink: [Function: unlink],
      unlinkSync: [Function: unlinkSync],
      utimes: [Function: utimes],
      utimesSync: [Function: utimesSync],
      watch: [Function: watch],
      watchFile: [Function: watchFile],
      writeFile: [Function: writeFile],
      writeFileSync: [Function: writeFileSync],
      write: [Function: write],
      writeSync: [Function: writeSync],
      writev: [Function: writev],
      writevSync: [Function: writevSync],
      Dir: [class Dir],
      Dirent: [class Dirent],
      Stats: [Function: Stats],
      ReadStream: [Getter/Setter],
      WriteStream: [Getter/Setter],
      FileReadStream: [Getter/Setter],
      FileWriteStream: [Getter/Setter],
      _toUnixTimestamp: [Function: toUnixTimestamp],
      F_OK: 0,
      R_OK: 4,
      W_OK: 2,
      X_OK: 1,
      constants: [Object: null prototype],
      promises: [Getter],
      gracefulify: [Function: patch]
    },
    _lstatBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function (anonymous)],
      _syncProvider: [Function (anonymous)],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    lstat: [Function: bound provide],
    lstatSync: [Function: bound provideSync],
    _statBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function (anonymous)],
      _syncProvider: [Function (anonymous)],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    stat: [Function: bound provide],
    statSync: [Function: bound provideSync],
    _readdirBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function: readdir],
      _syncProvider: [Function: readdirSync],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    readdir: [Function: bound provide],
    readdirSync: [Function: bound provideSync],
    _readFileBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function: readFile],
      _syncProvider: [Function: readFileSync],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    readFile: [Function: bound provide],
    readFileSync: [Function: bound provideSync],
    _readJsonBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function (anonymous)],
      _syncProvider: [Function (anonymous)],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    readJson: [Function: bound provide],
    readJsonSync: [Function: bound provideSync],
    _readlinkBackend: CacheBackend {
      _duration: 60000,
      _provider: [Function: readlink],
      _syncProvider: [Function: readlinkSync],
      _providerContext: [Object],
      _activeAsyncOperations: Map(0) {},
      _data: Map(0) {},
      _levels: [Array],
      _currentLevel: 0,
      _tickInterval: 500,
      _mode: 0,
      _timeout: undefined,
      _nextDecay: undefined,
      provide: [Function: bound provide],
      provideSync: [Function: bound provideSync]
    },
    readlink: [Function: bound provide],
    readlinkSync: [Function: bound provideSync]
  },
  fileSystemInfo: FileSystemInfo {
    fs: CachedInputFileSystem {
      fileSystem: [Object],
      _lstatBackend: [CacheBackend],
      lstat: [Function: bound provide],
      lstatSync: [Function: bound provideSync],
      _statBackend: [CacheBackend],
      stat: [Function: bound provide],
      statSync: [Function: bound provideSync],
      _readdirBackend: [CacheBackend],
      readdir: [Function: bound provide],
      readdirSync: [Function: bound provideSync],
      _readFileBackend: [CacheBackend],
      readFile: [Function: bound provide],
      readFileSync: [Function: bound provideSync],
      _readJsonBackend: [CacheBackend],
      readJson: [Function: bound provide],
      readJsonSync: [Function: bound provideSync],
      _readlinkBackend: [CacheBackend],
      readlink: [Function: bound provide],
      readlinkSync: [Function: bound provideSync]
    },
    logger: WebpackLogger {
      getChildLogger: [Function (anonymous)],
      [Symbol(webpack logger raw log method)]: [Function (anonymous)]
    },
    _remainingLogs: 40,
    _loggedPaths: Set(0) {},
    _hashFunction: 'md4',
    _snapshotCache: WeakMap { <items unknown> },
    _fileTimestampsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: true,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _fileHashesOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _fileTshsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: true,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _contextTimestampsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: true,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _contextHashesOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _contextTshsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: true,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _missingExistenceOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _managedItemInfoOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: false,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _managedFilesOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: true,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _managedContextsOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: true,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _managedMissingOptimization: SnapshotOptimization {
      _has: [Function (anonymous)],
      _get: [Function (anonymous)],
      _set: [Function (anonymous)],
      _useStartTime: false,
      _isSet: true,
      _map: Map(0) {},
      _statItemsShared: 0,
      _statItemsUnshared: 0,
      _statSharedSnapshots: 0,
      _statReusedSharedSnapshots: 0
    },
    _fileTimestamps: StackedCacheMap { map: Map(0) {}, stack: [] },
    _fileHashes: Map(0) {},
    _fileTshs: Map(0) {},
    _contextTimestamps: StackedCacheMap { map: Map(0) {}, stack: [] },
    _contextHashes: Map(0) {},
    _contextTshs: Map(0) {},
    _managedItems: Map(0) {},
    fileTimestampQueue: <ref *3> AsyncQueue {
      _name: 'file timestamp',
      _parallelism: 30,
      _processor: [Function: bound _readFileTimestamp],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *3],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    fileHashQueue: <ref *4> AsyncQueue {
      _name: 'file hash',
      _parallelism: 10,
      _processor: [Function: bound _readFileHash],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *4],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    contextTimestampQueue: <ref *5> AsyncQueue {
      _name: 'context timestamp',
      _parallelism: 2,
      _processor: [Function: bound _readContextTimestamp],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *5],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    contextHashQueue: <ref *6> AsyncQueue {
      _name: 'context hash',
      _parallelism: 2,
      _processor: [Function: bound _readContextHash],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *6],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    contextTshQueue: <ref *7> AsyncQueue {
      _name: 'context hash and timestamp',
      _parallelism: 2,
      _processor: [Function: bound _readContextTimestampAndHash],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *7],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    managedItemQueue: <ref *8> AsyncQueue {
      _name: 'managed item info',
      _parallelism: 10,
      _processor: [Function: bound _getManagedItemInfo],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *8],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    managedItemDirectoryQueue: <ref *9> AsyncQueue {
      _name: 'managed item directory info',
      _parallelism: 10,
      _processor: [Function: bound _getManagedItemDirectoryInfo],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: undefined,
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *9],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    managedPaths: [],
    managedPathsWithSlash: [],
    managedPathsRegExps: [],
    immutablePaths: [],
    immutablePathsWithSlash: [],
    immutablePathsRegExps: [],
    _cachedDeprecatedFileTimestamps: undefined,
    _cachedDeprecatedContextTimestamps: undefined,
    _warnAboutExperimentalEsmTracking: false,
    _statCreatedSnapshots: 0,
    _statTestedSnapshotsCached: 0,
    _statTestedSnapshotsNotCached: 0,
    _statTestedChildrenCached: 0,
    _statTestedChildrenNotCached: 0,
    _statTestedEntries: 0
  },
  valueCacheVersions: Map(0) {},
  requestShortener: RequestShortener { contextify: [Function: boundFn] },
  compilerPath: 'HtmlWebpackCompiler|0|',
  logger: WebpackLogger {
    getChildLogger: [Function (anonymous)],
    [Symbol(webpack logger raw log method)]: [Function (anonymous)]
  },
  options: {
    amd: undefined,
    bail: undefined,
    cache: {
      type: 'memory',
      maxGenerations: Infinity,
      cacheUnaffected: false
    },
    context: '/Users/ayushajay/Desktop/Webpack_demo',
    dependencies: undefined,
    devServer: { allowedHosts: 'all' },
    devtool: 'eval',
    entry: { bundle: [Object] },
    experiments: {
      buildHttp: undefined,
      lazyCompilation: undefined,
      css: undefined,
      futureDefaults: false,
      backCompat: true,
      syncWebAssembly: false,
      asyncWebAssembly: false,
      outputModule: false,
      layers: false,
      cacheUnaffected: false,
      topLevelAwait: true
    },
    externals: undefined,
    externalsPresets: {
      web: true,
      node: false,
      nwjs: false,
      electron: false,
      electronMain: false,
      electronPreload: false,
      electronRenderer: false
    },
    externalsType: 'var',
    ignoreWarnings: undefined,
    infrastructureLogging: {
      stream: [WriteStream],
      level: 'info',
      debug: false,
      colors: true,
      appendOnly: false
    },
    loader: { target: 'web', environment: [Object] },
    mode: 'development',
    module: {
      noParse: undefined,
      unsafeCache: [Function (anonymous)],
      parser: [Object],
      generator: {},
      defaultRules: [Array],
      rules: [Array]
    },
    name: undefined,
    node: { global: true, __filename: 'mock', __dirname: 'mock' },
    optimization: {
      runtimeChunk: false,
      splitChunks: [Object],
      emitOnErrors: true,
      removeAvailableModules: false,
      removeEmptyChunks: true,
      mergeDuplicateChunks: true,
      flagIncludedChunks: false,
      moduleIds: 'named',
      chunkIds: 'named',
      sideEffects: 'flag',
      providedExports: true,
      usedExports: false,
      innerGraph: false,
      mangleExports: false,
      concatenateModules: false,
      checkWasmTypes: false,
      mangleWasmImports: false,
      portableRecords: false,
      realContentHash: false,
      minimize: false,
      minimizer: [Array],
      nodeEnv: 'development'
    },
    output: {
      assetModuleFilename: '[hash][ext][query]',
      asyncChunks: true,
      charset: true,
      chunkFilename: '[name].js',
      chunkFormat: 'array-push',
      chunkLoading: 'require',
      chunkLoadingGlobal: 'webpackChunkwebpack_demo',
      chunkLoadTimeout: 120000,
      cssFilename: '[name].css',
      cssChunkFilename: '[name].css',
      clean: undefined,
      compareBeforeEmit: true,
      crossOriginLoading: false,
      devtoolFallbackModuleFilenameTemplate: undefined,
      devtoolModuleFilenameTemplate: undefined,
      devtoolNamespace: 'webpack_demo',
      environment: [Object],
      enabledChunkLoadingTypes: [Array],
      enabledLibraryTypes: [],
      enabledWasmLoadingTypes: [Array],
      filename: '__child-[name]',
      globalObject: 'self',
      hashDigest: 'hex',
      hashDigestLength: 20,
      hashFunction: 'md4',
      hashSalt: undefined,
      hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
      hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
      hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
      ignoreBrowserWarnings: undefined,
      iife: true,
      importFunctionName: 'import',
      importMetaName: 'import.meta',
      scriptType: 'text/javascript',
      library: [Object],
      module: false,
      path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      pathinfo: true,
      publicPath: '',
      sourceMapFilename: '[file].map[query]',
      sourcePrefix: undefined,
      strictModuleExceptionHandling: false,
      trustedTypes: undefined,
      uniqueName: 'webpack_demo',
      wasmLoading: 'fetch',
      webassemblyModuleFilename: '[hash].module.wasm',
      workerPublicPath: '',
      workerChunkLoading: 'import-scripts',
      workerWasmLoading: 'fetch'
    },
    parallelism: 100,
    performance: false,
    plugins: [
      [CLIPlugin],
      [CircularDependencyPlugin],
      [HtmlWebpackPlugin],
      PrintChunksPlugin {},
      [NormalModuleReplacementPlugin]
    ],
    profile: false,
    recordsInputPath: false,
    recordsOutputPath: false,
    resolve: {
      byDependency: [Object],
      cache: true,
      modules: [Array],
      conditionNames: [Array],
      mainFiles: [Array],
      extensions: [],
      aliasFields: [],
      exportsFields: [Array],
      roots: [Array],
      mainFields: [Array]
    },
    resolveLoader: {
      cache: true,
      conditionNames: [Array],
      exportsFields: [Array],
      mainFields: [Array],
      extensions: [Array],
      mainFiles: [Array]
    },
    snapshot: {
      resolveBuildDependencies: [Object],
      buildDependencies: [Object],
      resolve: [Object],
      module: [Object],
      immutablePaths: [],
      managedPaths: [Array]
    },
    stats: { preset: 'normal', colors: false },
    target: 'web',
    watch: false,
    watchOptions: {}
  },
  outputOptions: {
    assetModuleFilename: '[hash][ext][query]',
    asyncChunks: true,
    charset: true,
    chunkFilename: '[name].js',
    chunkFormat: 'array-push',
    chunkLoading: 'require',
    chunkLoadingGlobal: 'webpackChunkwebpack_demo',
    chunkLoadTimeout: 120000,
    cssFilename: '[name].css',
    cssChunkFilename: '[name].css',
    clean: undefined,
    compareBeforeEmit: true,
    crossOriginLoading: false,
    devtoolFallbackModuleFilenameTemplate: undefined,
    devtoolModuleFilenameTemplate: undefined,
    devtoolNamespace: 'webpack_demo',
    environment: {
      globalThis: undefined,
      bigIntLiteral: undefined,
      const: true,
      arrowFunction: true,
      forOf: true,
      destructuring: true,
      optionalChaining: true,
      templateLiteral: true,
      dynamicImport: undefined,
      dynamicImportInWorker: undefined,
      module: undefined
    },
    enabledChunkLoadingTypes: [ 'jsonp', 'import-scripts' ],
    enabledLibraryTypes: [],
    enabledWasmLoadingTypes: [ 'fetch' ],
    filename: '__child-[name]',
    globalObject: 'self',
    hashDigest: 'hex',
    hashDigestLength: 20,
    hashFunction: 'md4',
    hashSalt: undefined,
    hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
    hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
    hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
    ignoreBrowserWarnings: undefined,
    iife: true,
    importFunctionName: 'import',
    importMetaName: 'import.meta',
    scriptType: 'text/javascript',
    library: { type: 'var', name: 'HTML_WEBPACK_PLUGIN_RESULT' },
    module: false,
    path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
    pathinfo: true,
    publicPath: '',
    sourceMapFilename: '[file].map[query]',
    sourcePrefix: undefined,
    strictModuleExceptionHandling: false,
    trustedTypes: undefined,
    uniqueName: 'webpack_demo',
    wasmLoading: 'fetch',
    webassemblyModuleFilename: '[hash].module.wasm',
    workerPublicPath: '',
    workerChunkLoading: 'import-scripts',
    workerWasmLoading: 'fetch'
  },
  bail: false,
  profile: false,
  params: {
    normalModuleFactory: NormalModuleFactory {
      hooks: [Object],
      resolverFactory: [ResolverFactory],
      ruleSet: [Object],
      context: '/Users/ayushajay/Desktop/Webpack_demo',
      fs: [CachedInputFileSystem],
      _globalParserOptions: [Object],
      _globalGeneratorOptions: {},
      parserCache: Map(0) {},
      generatorCache: Map(0) {},
      _restoredUnsafeCacheEntries: Set(0) {},
      _parseResourceWithoutFragment: [Function (anonymous)]
    },
    contextModuleFactory: ContextModuleFactory {
      hooks: [Object],
      resolverFactory: [ResolverFactory]
    }
  },
  mainTemplate: MainTemplate {
    _outputOptions: {
      assetModuleFilename: '[hash][ext][query]',
      asyncChunks: true,
      charset: true,
      chunkFilename: '[name].js',
      chunkFormat: 'array-push',
      chunkLoading: 'require',
      chunkLoadingGlobal: 'webpackChunkwebpack_demo',
      chunkLoadTimeout: 120000,
      cssFilename: '[name].css',
      cssChunkFilename: '[name].css',
      clean: undefined,
      compareBeforeEmit: true,
      crossOriginLoading: false,
      devtoolFallbackModuleFilenameTemplate: undefined,
      devtoolModuleFilenameTemplate: undefined,
      devtoolNamespace: 'webpack_demo',
      environment: [Object],
      enabledChunkLoadingTypes: [Array],
      enabledLibraryTypes: [],
      enabledWasmLoadingTypes: [Array],
      filename: '__child-[name]',
      globalObject: 'self',
      hashDigest: 'hex',
      hashDigestLength: 20,
      hashFunction: 'md4',
      hashSalt: undefined,
      hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
      hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
      hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
      ignoreBrowserWarnings: undefined,
      iife: true,
      importFunctionName: 'import',
      importMetaName: 'import.meta',
      scriptType: 'text/javascript',
      library: [Object],
      module: false,
      path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      pathinfo: true,
      publicPath: '',
      sourceMapFilename: '[file].map[query]',
      sourcePrefix: undefined,
      strictModuleExceptionHandling: false,
      trustedTypes: undefined,
      uniqueName: 'webpack_demo',
      wasmLoading: 'fetch',
      webassemblyModuleFilename: '[hash].module.wasm',
      workerPublicPath: '',
      workerChunkLoading: 'import-scripts',
      workerWasmLoading: 'fetch'
    },
    hooks: {
      renderManifest: [Object],
      modules: [Object],
      moduleObj: [Object],
      require: [Object],
      beforeStartup: [Object],
      startup: [Object],
      afterStartup: [Object],
      render: [Object],
      renderWithEntry: [Object],
      assetPath: [Object],
      hash: [Object],
      hashForChunk: [Object],
      globalHashPaths: [Object],
      globalHash: [Object],
      hotBootstrap: [Object],
      bootstrap: [Hook],
      localVars: [Hook],
      requireExtensions: [Hook],
      requireEnsure: [Hook],
      jsonpScript: [Getter],
      linkPrefetch: [Getter],
      linkPreload: [Getter]
    },
    renderCurrentHashCode: [Function: deprecated],
    getPublicPath: [Function: deprecated],
    getAssetPath: [Function: deprecated],
    getAssetPathWithInfo: [Function: deprecated]
  },
  chunkTemplate: ChunkTemplate {
    _outputOptions: {
      assetModuleFilename: '[hash][ext][query]',
      asyncChunks: true,
      charset: true,
      chunkFilename: '[name].js',
      chunkFormat: 'array-push',
      chunkLoading: 'require',
      chunkLoadingGlobal: 'webpackChunkwebpack_demo',
      chunkLoadTimeout: 120000,
      cssFilename: '[name].css',
      cssChunkFilename: '[name].css',
      clean: undefined,
      compareBeforeEmit: true,
      crossOriginLoading: false,
      devtoolFallbackModuleFilenameTemplate: undefined,
      devtoolModuleFilenameTemplate: undefined,
      devtoolNamespace: 'webpack_demo',
      environment: [Object],
      enabledChunkLoadingTypes: [Array],
      enabledLibraryTypes: [],
      enabledWasmLoadingTypes: [Array],
      filename: '__child-[name]',
      globalObject: 'self',
      hashDigest: 'hex',
      hashDigestLength: 20,
      hashFunction: 'md4',
      hashSalt: undefined,
      hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
      hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
      hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
      ignoreBrowserWarnings: undefined,
      iife: true,
      importFunctionName: 'import',
      importMetaName: 'import.meta',
      scriptType: 'text/javascript',
      library: [Object],
      module: false,
      path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      pathinfo: true,
      publicPath: '',
      sourceMapFilename: '[file].map[query]',
      sourcePrefix: undefined,
      strictModuleExceptionHandling: false,
      trustedTypes: undefined,
      uniqueName: 'webpack_demo',
      wasmLoading: 'fetch',
      webassemblyModuleFilename: '[hash].module.wasm',
      workerPublicPath: '',
      workerChunkLoading: 'import-scripts',
      workerWasmLoading: 'fetch'
    },
    hooks: {
      renderManifest: [Object],
      modules: [Object],
      render: [Object],
      renderWithEntry: [Object],
      hash: [Object],
      hashForChunk: [Object]
    }
  },
  runtimeTemplate: RuntimeTemplate {
    compilation: [Circular *2],
    outputOptions: {
      assetModuleFilename: '[hash][ext][query]',
      asyncChunks: true,
      charset: true,
      chunkFilename: '[name].js',
      chunkFormat: 'array-push',
      chunkLoading: 'require',
      chunkLoadingGlobal: 'webpackChunkwebpack_demo',
      chunkLoadTimeout: 120000,
      cssFilename: '[name].css',
      cssChunkFilename: '[name].css',
      clean: undefined,
      compareBeforeEmit: true,
      crossOriginLoading: false,
      devtoolFallbackModuleFilenameTemplate: undefined,
      devtoolModuleFilenameTemplate: undefined,
      devtoolNamespace: 'webpack_demo',
      environment: [Object],
      enabledChunkLoadingTypes: [Array],
      enabledLibraryTypes: [],
      enabledWasmLoadingTypes: [Array],
      filename: '__child-[name]',
      globalObject: 'self',
      hashDigest: 'hex',
      hashDigestLength: 20,
      hashFunction: 'md4',
      hashSalt: undefined,
      hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
      hotUpdateGlobal: 'webpackHotUpdatewebpack_demo',
      hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
      ignoreBrowserWarnings: undefined,
      iife: true,
      importFunctionName: 'import',
      importMetaName: 'import.meta',
      scriptType: 'text/javascript',
      library: [Object],
      module: false,
      path: '/Users/ayushajay/Desktop/Webpack_demo/dist',
      pathinfo: true,
      publicPath: '',
      sourceMapFilename: '[file].map[query]',
      sourcePrefix: undefined,
      strictModuleExceptionHandling: false,
      trustedTypes: undefined,
      uniqueName: 'webpack_demo',
      wasmLoading: 'fetch',
      webassemblyModuleFilename: '[hash].module.wasm',
      workerPublicPath: '',
      workerChunkLoading: 'import-scripts',
      workerWasmLoading: 'fetch'
    },
    requestShortener: RequestShortener { contextify: [Function: boundFn] },
    globalObject: 'self',
    contentHashReplacement: 'XXXXXXXXXXXXXXXXXXXX'
  },
  moduleTemplates: {
    javascript: ModuleTemplate {
      _runtimeTemplate: [RuntimeTemplate],
      type: 'javascript',
      hooks: [Object]
    }
  },
  moduleMemCaches: undefined,
  moduleMemCaches2: undefined,
  moduleGraph: ModuleGraph {
    _dependencyMap: WeakMap { <items unknown> },
    _moduleMap: Map(0) {},
    _metaMap: WeakMap { <items unknown> },
    _cache: undefined,
    _moduleMemCaches: undefined,
    _cacheStage: undefined
  },
  chunkGraph: undefined,
  codeGenerationResults: undefined,
  processDependenciesQueue: <ref *10> AsyncQueue {
    _name: 'processDependencies',
    _parallelism: 100,
    _processor: [Function: bound _processModuleDependencies],
    _getKey: [Function (anonymous)],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: [ [AsyncQueue], [AsyncQueue], [AsyncQueue] ],
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: [Circular *10],
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  addModuleQueue: AsyncQueue {
    _name: 'addModule',
    _parallelism: 1,
    _processor: [Function: bound _addModule],
    _getKey: [Function: getKey],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: undefined,
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: <ref *10> AsyncQueue {
      _name: 'processDependencies',
      _parallelism: 100,
      _processor: [Function: bound _processModuleDependencies],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: [Array],
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *10],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  factorizeQueue: AsyncQueue {
    _name: 'factorize',
    _parallelism: 1,
    _processor: [Function: bound _factorizeModule],
    _getKey: [Function (anonymous)],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: undefined,
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: <ref *10> AsyncQueue {
      _name: 'processDependencies',
      _parallelism: 100,
      _processor: [Function: bound _processModuleDependencies],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: [Array],
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *10],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  buildQueue: AsyncQueue {
    _name: 'build',
    _parallelism: 1,
    _processor: [Function: bound _buildModule],
    _getKey: [Function (anonymous)],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: undefined,
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: <ref *10> AsyncQueue {
      _name: 'processDependencies',
      _parallelism: 100,
      _processor: [Function: bound _processModuleDependencies],
      _getKey: [Function (anonymous)],
      _entries: Map(0) {},
      _queued: [ArrayQueue],
      _children: [Array],
      _activeTasks: 0,
      _willEnsureProcessing: false,
      _needProcessing: false,
      _stopped: false,
      _root: [Circular *10],
      hooks: [Object],
      _ensureProcessing: [Function: bound _ensureProcessing]
    },
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  rebuildQueue: <ref *11> AsyncQueue {
    _name: 'rebuild',
    _parallelism: 100,
    _processor: [Function: bound _rebuildModule],
    _getKey: [Function (anonymous)],
    _entries: Map(0) {},
    _queued: ArrayQueue { _list: [], _listReversed: [] },
    _children: undefined,
    _activeTasks: 0,
    _willEnsureProcessing: false,
    _needProcessing: false,
    _stopped: false,
    _root: [Circular *11],
    hooks: {
      beforeAdd: [Hook],
      added: [Hook],
      beforeStart: [Hook],
      started: [Hook],
      result: [Hook]
    },
    _ensureProcessing: [Function: bound _ensureProcessing]
  },
  creatingModuleDuringBuild: WeakMap { <items unknown> },
  entries: Map(0) {},
  globalEntry: {
    dependencies: [],
    includeDependencies: [],
    options: { name: undefined }
  },
  entrypoints: Map(0) {},
  asyncEntrypoints: [],
  chunks: Set(0) {
    concat: [Function (anonymous)],
    entry: [Function (anonymous)],
    filter: [Function (anonymous)],
    find: [Function (anonymous)],
    findIndex: [Function (anonymous)],
    includes: [Function (anonymous)],
    indexOf: [Function (anonymous)],
    join: [Function (anonymous)],
    lastIndexOf: [Function (anonymous)],
    map: [Function (anonymous)],
    reduce: [Function (anonymous)],
    reduceRight: [Function (anonymous)],
    slice: [Function (anonymous)],
    some: [Function (anonymous)],
    push: [Function (anonymous)],
    copyWithin: [Function (anonymous)],
    fill: [Function (anonymous)],
    pop: [Function (anonymous)],
    reverse: [Function (anonymous)],
    shift: [Function (anonymous)],
    splice: [Function (anonymous)],
    sort: [Function (anonymous)],
    unshift: [Function (anonymous)],
    [Symbol(Symbol.isConcatSpreadable)]: true
  },
  chunkGroups: [],
  namedChunkGroups: Map(0) {},
  namedChunks: Map(0) {},
  modules: Set(0) {
    concat: [Function (anonymous)],
    entry: [Function (anonymous)],
    filter: [Function (anonymous)],
    find: [Function (anonymous)],
    findIndex: [Function (anonymous)],
    includes: [Function (anonymous)],
    indexOf: [Function (anonymous)],
    join: [Function (anonymous)],
    lastIndexOf: [Function (anonymous)],
    map: [Function (anonymous)],
    reduce: [Function (anonymous)],
    reduceRight: [Function (anonymous)],
    slice: [Function (anonymous)],
    some: [Function (anonymous)],
    push: [Function (anonymous)],
    copyWithin: [Function (anonymous)],
    fill: [Function (anonymous)],
    pop: [Function (anonymous)],
    reverse: [Function (anonymous)],
    shift: [Function (anonymous)],
    splice: [Function (anonymous)],
    sort: [Function (anonymous)],
    unshift: [Function (anonymous)],
    [Symbol(Symbol.isConcatSpreadable)]: true
  },
  _modules: Map(0) {},
  records: {},
  additionalChunkAssets: [],
  assets: {},
  assetsInfo: Map(0) {},
  _assetsRelatedIn: Map(0) {},
  errors: [],
  warnings: [],
  children: [],
  logging: Map(0) {},
  dependencyFactories: Map(0) {},
  dependencyTemplates: DependencyTemplates {
    _map: Map(0) {},
    _hash: '31d6cfe0d16ae931b73c59d7e0c089c0',
    _hashFunction: 'md4'
  },
  childrenCounters: {},
  usedChunkIds: null,
  usedModuleIds: null,
  needAdditionalPass: false,
  _restoredUnsafeCacheModuleEntries: Set(0) {},
  _restoredUnsafeCacheEntries: Map(0) {},
  builtModules: WeakSet { <items unknown> },
  codeGeneratedModules: WeakSet { <items unknown> },
  buildTimeExecutedModules: WeakSet { <items unknown> },
  _rebuildingModules: Map(0) {},
  emittedAssets: Set(0) {},
  comparedForEmitAssets: Set(0) {},
  fileDependencies: LazySet {
    _set: Set(0) {},
    _toMerge: Set(0) {},
    _toDeepMerge: [],
    _needMerge: false,
    _deopt: false
  },
  contextDependencies: LazySet {
    _set: Set(0) {},
    _toMerge: Set(0) {},
    _toDeepMerge: [],
    _needMerge: false,
    _deopt: false
  },
  missingDependencies: LazySet {
    _set: Set(0) {},
    _toMerge: Set(0) {},
    _toDeepMerge: [],
    _needMerge: false,
    _deopt: false
  },
  buildDependencies: LazySet {
    _set: Set(0) {},
    _toMerge: Set(0) {},
    _toDeepMerge: [],
    _needMerge: false,
    _deopt: false
  },
  compilationDependencies: { add: [Function: deprecated] },
  _modulesCache: CacheFacade {
    _cache: Cache { hooks: [Object] },
    _name: 'HtmlWebpackCompiler|0|Compilation/modules',
    _hashFunction: 'md4'
  },
  _assetsCache: CacheFacade {
    _cache: Cache { hooks: [Object] },
    _name: 'HtmlWebpackCompiler|0|Compilation/assets',
    _hashFunction: 'md4'
  },
  _codeGenerationCache: CacheFacade {
    _cache: Cache { hooks: [Object] },
    _name: 'HtmlWebpackCompiler|0|Compilation/codeGeneration',
    _hashFunction: 'md4'
  },
  _unsafeCache: true,
  _unsafeCachePredicate: [Function (anonymous)]
}
asset bundle.js 24.6 KiB [compared for emit] (name: bundle)
asset index.html 233 bytes [compared for emit]
runtime modules 972 bytes 5 modules
cacheable modules 9.97 KiB
  modules by path ./node_modules/ 8.15 KiB
    modules by path ./node_modules/style-loader/dist/runtime/*.js 5.84 KiB 6 modules
    modules by path ./node_modules/css-loader/dist/runtime/*.js 2.31 KiB
      ./node_modules/css-loader/dist/runtime/noSourceMaps.js 64 bytes [built] [code generated]
      ./node_modules/css-loader/dist/runtime/api.js 2.25 KiB [built] [code generated]
  modules by path ./src/*.js 233 bytes
    ./src/index.js 80 bytes [built] [code generated]
    ./src/main.js 117 bytes [built] [code generated]
    ./src/dependent.js 36 bytes [built] [code generated]
  modules by path ./*.css 1.59 KiB
    ./app.css 1.1 KiB [built] [code generated]
    ./node_modules/css-loader/dist/cjs.js!./app.css 501 bytes [built] [code generated]
webpack 5.85.0 compiled successfully in 1920 ms
